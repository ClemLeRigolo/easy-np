stages:
  - linter
  - test
  - badgesDoc
  - sonarqube-check

eslint:
  stage: linter
  tags:
    - docker
  image: lxsnsn/gitlab-ci-easynp
  script:
    - yarn install --cache-folder .yarn
    - npx eslint 'src/**/*.{js,jsx,ts,tsx}' > eslint_report.txt || echo $? > pass.txt
  cache:
    paths:
      - node_modules/
      - .yarn/
  artifacts:
    when: always
    paths:
      - eslint_report.txt
      - pass.txt

testing:
  stage: test
  tags:
    - docker
  image: lxsnsn/gitlab-ci-easynp
  script:
    - echo "$GOOGLE_SERVICE_ACCOUNT" | base64 -d > serviceAccount.json
    - yarn install --cache-folder .yarn
    - npx firebase emulators:start --import bdd --token "$FIREBASE_LOGIN" &
    - npm run startLocal &
    - while ! curl -s http://localhost:3000 || ! curl -s http://localhost:4000 ; do sleep 5; done # wait for the server to start
    - npm run cypress:ci > cypress_report.txt || echo $?
    - npx nyc report > coverage_report.txt || echo $?
    - rm serviceAccount.json
  cache:
    paths:
      - node_modules/
      - .yarn/
  artifacts:
    when: always
    paths:
      - coverage_report.txt
      - cypress_report.txt

badges:
  stage: badgesDoc
  tags:
    - docker
  image: python
  script:
    - pip install anybadge
    - bash generateBadges.sh
  dependencies:
    - testing
    - eslint
  artifacts:
    when: always
    paths:
      - "lint.svg"
      - "cypress.svg"
      - "coverage.svg"
  when: always

doc:
  stage: badgesDoc
  tags:
    - docker
  image: python
  script:
    - pip install mkdocs mkdocs-material
    - mkdocs build
    - mv site public
  when: always
  only:
    changes:
      - docs/**/*
      - mkdocs.yml

sonarqube-report:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  before_script:
    # Les Ã©tapes suivantes permettent d'accepter le certificat du serveur de l'Ensimag
    - wget https://ssl-tools.net/certificates/c2826e266d7405d34ef89762636ae4b36e86cb5e.pem -O /usr/local/share/ca-certificates/loupanov-ca.pem
    - update-ca-certificates
    - keytool -import -trustcacerts -file /usr/local/share/ca-certificates/loupanov-ca.pem  -alias sonarqube -keystore "$JAVA_HOME/lib/security/cacerts" -storepass changeit -noprompt
  script:
    - sonar-scanner -X # Lance l'analyse distante du projet
  allow_failure: true
  only:
    - master